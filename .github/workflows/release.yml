name: Maven Central & GitHub Release

on:
  push:
    branches:
      - main        # 普通提交 -> SNAPSHOT
    tags:
      - 'v*'        # 打 tag -> Release

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ 配置 JDK 17 + Maven + OSSRH + GPG
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: ${{ secrets.OSSRH_USERNAME }}
          server-password: ${{ secrets.OSSRH_PASSWORD }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # 3️⃣ 缓存 Maven 依赖
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4️⃣ 构建项目
      - name: Build with Maven
        run: mvn -B clean install -DskipTests

      # 5️⃣ 发布 SNAPSHOT（main 分支）
      - name: Deploy SNAPSHOT to OSSRH
        if: github.ref == 'refs/heads/main'
        run: mvn -B deploy -DskipTests -P snapshot

      # 6️⃣ 发布 Release（tag）
      - name: Deploy Release to OSSRH
        if: startsWith(github.ref, 'refs/tags/')
        run: mvn -B deploy -DskipTests gpg:sign

      # 7️⃣ 创建 GitHub Release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 8️⃣ 上传 JAR 到 GitHub Release
      - name: Upload JAR to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/CacheGuard-${{ github.ref_name }}.jar
          asset_name: CacheGuard-${{ github.ref_name }}.jar
          asset_content_type: application/java-archive
